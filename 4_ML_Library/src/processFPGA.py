######################################################################
# Script to read result frames from the FPGA processing
#
# Author: Arasch Lagies
#
# First Version: 1/24/2020
# Latest update:
#
# Call: python processFPGA.py
######################################################################
import os
import argparse
import numpy as np
import matplotlib.pyplot as plt
import csv

DEFAULTSOURCEFILE = "/home/user1/Documents/CNN/cnn/fpga_accelerator/AcceleratorOutput.txt"
DEFUALTTARGETFILE = "/home/user1/Documents/CNN/cnn/fpga_accelerator/ProcessedAcceleratorOutput.csv"
DEFAULTORIGINAL = "/home/user1/Documents/CNN/cnn/fpga_accelerator/MNIST_Bin8Bit__ylabel7.csv"
DEFROWS = 32
DEFCOLS = 32
DEFNUMFRAMES = 16
SAVEPROCESSED = 'no'

ap = argparse.ArgumentParser()
ap.add_argument("-s", "--source", type=str, default=DEFAULTSOURCEFILE,
                help="Path and finame to the file containing the FPGA genetated resultframes. Default = {}".format(DEFAULTSOURCEFILE))
ap.add_argument("--target", type=str, default=DEFUALTTARGETFILE,
                help="Path and name of csv file where to save converted fpga data. Default = {}.".format(DEFUALTTARGETFILE))
ap.add_argument("-p", "--saveProc", type=str, default=SAVEPROCESSED,
                help="Save FPGA processed frames to file (y/n)? Default = {}".format(SAVEPROCESSED))
ap.add_argument("-o", "--original", type=str, default=DEFAULTORIGINAL,
                help="Path and name of original image saved in 8-bit bynary format. Default = {}.".format(DEFAULTORIGINAL))
ap.add_argument("-r", "--rows", type=int, default=DEFROWS,
                help="Rows of input frames. Default= {}".format(DEFROWS))
ap.add_argument("-c","--cols", type=int, default=DEFCOLS,
                help='Columns of input frames. Default= {}'.format(DEFCOLS))
ap.add_argument("--frames", type=int, default=DEFNUMFRAMES,
                help="Number of frames generated by the FPGS. Default= {}".format(DEFNUMFRAMES))
args = ap.parse_args()

# Specifying the subplots that get an axis on the left:
left = [2, 5, 9, 13, 17]
# Specifying the subplots that get an axis on the bottom:
bottom = [17, 18, 19, 20]

def Convert(eightBit):
    """
        Convert an 8-bit bynary value to a decimal number...
    """
    decVal = 0
    for i, b in enumerate(reversed(eightBit)):
        decVal += int(b) * pow(2, i)
    return decVal


class Processfpga():
    def __init__(self, source = None, target = None, orig = None, rows = None, cols = None, frames = None):
        self.source=args.source if source is None else source
        self.target=args.target if target is None else target
        self.orig= args.original if orig is None else orig
        self.rows=args.rows if rows is None else rows
        self.cols=args.cols if cols is None else cols
        self.frames=args.frames if frames is None else frames
        if (args.saveProc.lower() == "y"):
            if (os.path.isfile(self.target)):
                print(f"[ERROR] Target file already exists. Aborting...")
                exit(0)

    def ReadFile(self):  
        # Read in the original image
        #with open(self.orig, 'r') as o:
        matrix = np.genfromtxt(self.orig, delimiter=',')
        #print(matrix)

        with open(self.source, "r") as f:
            fig = plt.figure(figsize=(50, 50))
            sub = fig.add_subplot(5, 4, 2)
            plt.title("Original")

            plt.yticks(np.arange(0,31, step=10))
            plt.tick_params(
                axis='x',          # changes apply to the x-axis
                which='both',      # both major and minor ticks are affected
                bottom=False,      # ticks along the bottom edge are off
                top=False,         # ticks along the top edge are off
                labelbottom=False) # labels along the bottom edge are off
            sub.imshow(matrix, interpolation='nearest')

            frameCounter = 4
            for line in f:
                if not line.strip():        # skip empty linres...
                    decFrame = np.zeros((self.rows, self.cols))
                    rowCounter = 0
                    frameCounter += 1
                    for row in range(self.rows):
                        decRow = [] 
                        line = f.readline()
                        line = line.replace("\n", "")   
                        if(line == ""):
                            break
                        else:
                            line = line.split(',')
                            # convert a row of 8-bit values to decimal numbers
                            for i, num in enumerate(line):
                                #print(f"Num {i} = {num}")
                                decRow.append(Convert(num))
                                rowNp = np.asarray(decRow, dtype=np.int32)

                        decFrame[rowCounter, :] = decFrame[rowCounter, :] + rowNp
                        rowCounter += 1
                    print(decFrame)
                    # append processed frame to file...
                    with open(self.target, 'a') as t:
                        np.savetxt(t, decFrame.astype(int), fmt="%1.3f", delimiter=",")
                        t.write("\n")

                    sub = fig.add_subplot(5, 4, frameCounter)
                    plt.title("Filter #{}".format(frameCounter-4))
                    
                    if frameCounter in bottom:
                        plt.xticks(np.arange(0,31, step=10))
                        plt.yticks(np.arange(0,31, step=10))

                    else:
                        plt.yticks(np.arange(0,31, step=10))
                        plt.tick_params(
                            axis='x',          # changes apply to the x-axis
                            which='both',      # both major and minor ticks are affected
                            bottom=False,      # ticks along the bottom edge are off
                            top=False,         # ticks along the top edge are off
                            labelbottom=False) # labels along the bottom edge are off

       
                    # plt.tight_layout(pad=5.4, w_pad=0.5, h_pad=10.0)
                    sub.imshow(decFrame, interpolation='nearest')
            plt.show()

    def Rescale(self):
                


            



def run():
    fpga = Processfpga()
    fpga.ReadFile()
    #print("Result of binary 11001 is : {}".format(Convert("11001")))

if __name__=="__main__":
    run()